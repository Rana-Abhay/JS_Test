An array is a special variable, which can hold more than one value:

An array can hold many values under a single name, and you can access the values by referring to an index number.

Using an array literal is the easiest way to create a JavaScript Array.

Syntax:

const array_name = [item1, item2, ...];      

It is a common practice to declare arrays with the const keyword.

You can also create an array, and then provide the elements:

There is no need to use new Array().

For simplicity, readability and execution speed, use the array literal method.

Note: Array indexes start with 0.

The JavaScript method toString() converts an array to a string of (comma separated) array values.

Arrays are a special type of objects. The typeof operator in JavaScript returns "object" for arrays.

But, JavaScript arrays are best described as arrays.

Arrays use numbers to access its "elements". Objects use names to access its "members".

The length property of an array returns the length of an array (the number of array elements).

The easiest way to add a new element to an array is using the push() method:

The Difference Between Arrays and Objects
In JavaScript, arrays use numbered indexes.  

In JavaScript, objects use named indexes.

Arrays are a special kind of objects, with numbered indexes.

When to Use Arrays. When to use Objects.
JavaScript does not support associative arrays.
You should use objects when you want the element names to be strings (text).
You should use arrays when you want the element names to be numbers.

------------------------------------

Basic Array Methods
Array length
Array toString()
Array at()
Array join()
Array pop()
Array push()
Array shift()
Array unshift()
Array delete()
Array concat()
Array copyWithin()
Array flat()
Array splice()
Array toSpliced()
Array slice()